\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Purpose of this document}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Terms, definitions and concepts}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Regions}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Resource types}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Zones}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Groups}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Simplified scenario for CERN. It is assumed that there are two distinct computer centers which look like one large site. As an example the batch resources spread over the two computer centers. Therefore, only one region is present. Within this region there are CPU resources under UPS coverage, cheap CPU resources and disk resources. Similar resources which spread over the different computer centers still belong to the same zone.}}{7}}
\newlabel{cerncase}{{1}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.5}Top level allocations}{8}}
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Example top level allocation for CMS: There are two zones, one with UPS coverage which has 10 servers, and one with 100 servers for CPU processing. The performance of each server corresponds to 100\nobreakspace  {}HS06. CMS gets a total allocation of 1000\nobreakspace  {}HS06, 10\% of which are UPS covered. Cost of resources in zone 1 are larger than those in zone 2 due to the UPS feature.}}{8}}
\newlabel{toplevelCMS}{{1}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.6}Projects}{8}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.6.1}Project requirements}{8}}
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Example projects which are allocated by the CloudMan administrator. There are 3 only here: public batch is owned by some group in IT which manages the batch farm. The idea of this project is to setup shares for large user groups. The vobox project is a service where experiments can get reliable resources which are covered with a UPS. This project will only use resource from Zone 1 in fig\nobreakspace  {}1\hbox {} while the batch project will use only resources from Zone 2 because they are cheaper. The attribute SHARE indicates that these are shared (not dedicated) resources. The maximum recursion depth means that for this project it is possible to do group and subgroup allocations only, and not beyond that. The IaaS self service is meant for cheap development machines. It uses the same resources as the public batch project.}}{9}}
\newlabel{projects}{{2}{9}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.6.2}Project attributes}{9}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.6.3}Recursion limitation}{9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.7}Project allocations}{9}}
\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces  Project allocation for the example CMS group. These allocations are done by the CMS administrator who can sign up to any project for which he has a matching resource allocation. For each project he's interested in he determines a responsible (group of people), and gives them a fraction of the resources he got from the CloudMan administrator. With 10\% of the total allocation in the UPS they fill up their quota there.}}{10}}
\newlabel{projectsAllocation}{{3}{10}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.8}Group and sub-group allocations}{10}}
\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces Group allocations for the batch project as done by the CMS\_batchadmin. The Higgs search group gets a large share of the batch system share of CMS. They can further on set priorities by defining shares for the individual Higgs search teams. }}{10}}
\newlabel{groupAllocationForBatch}{{4}{10}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.8.1}Group and subgroup attributes}{10}}
\citation{Django}
\@writefile{lot}{\contentsline {table}{\numberline {5}{\ignorespaces Group allocations for the batch project as done by the CMS\_batchadmin. The Higgs search group gets a large share of the batch system share of CMS. They can further on set priorities by defining shares for the individual Higgs search teams. Due to the limitation in the recursion depth in the batch project it is not possible for the CMSHiggsAdmins to further split up the resources. }}{11}}
\newlabel{subgroupAllocationForBatch}{{5}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Buisiness continuity}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Implementation goals}{11}}
\citation{ORM}
\citation{ORM}
\citation{CernSSO}
\citation{CernEgroups}
\citation{CernEgroups}
\@writefile{toc}{\contentsline {section}{\numberline {6}Backend types}{13}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.1}Project backends}{14}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.2}Mover backend}{15}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Project backend examples}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1}Batch shares}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2}Cloud drivers: common ideas}{16}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.1}A possible model}{16}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.2}Self-service configuration}{17}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3}Conversion of units}{17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3}OpenStack}{17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4}OpenNebula}{17}}
\@writefile{toc}{\contentsline {section}{\numberline {8}Storage}{17}}
\citation{arne}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1}AFS}{18}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2}EOS}{19}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3}CASTOR}{19}}
\@writefile{toc}{\contentsline {section}{\numberline {9}Details}{19}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces  Updated architecture of the desired system. Users connect to the front-end which offers a graphical user interface. The side is secured with SSL techniques. All users have to authenticate using the sites Single Sign On mechanism. The data which is entered is stored in an external database and exported in a low level format. Shown in this figure are project specific backends only. In general these backends are site specific, and design to configure specific services. Each backend reads the data which it needs to configure it's resources from the low level export layer from CloudMan. The current state which includes error or warning conditions is reported back to the frontend as well as the CloudMan database. The database is used to record the historical state data per project backend.}}{20}}
\newlabel{architecture}{{2}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.1}Definition of Interfaces}{21}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {9.1.1}Low level data export layer}{21}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {9.1.2}Backend state data}{21}}
\@writefile{lot}{\contentsline {table}{\numberline {6}{\ignorespaces Current state information as published by the project backends.}}{21}}
\newlabel{stateinfo}{{6}{21}}
\@writefile{lot}{\contentsline {table}{\numberline {7}{\ignorespaces  Required key-value pairs for state information as published by the project backends for each resource. The block is repeated for each ResourceOwner.}}{21}}
\newlabel{resourceinfo}{{7}{21}}
\bibcite{ORM}{1}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {9.1.3}CloudMan database schema}{22}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces  Cloudman database schema, Betelgeuze release.}}{23}}
\newlabel{ddb_schema_new}{{3}{23}}
\bibcite{Django}{2}
\bibcite{CloudManProject}{3}
\bibcite{CernSSO}{4}
\bibcite{CernEgroups}{5}
\bibcite{ONE}{6}
\bibcite{OPENSTACK}{7}
\bibcite{XEN}{8}
\bibcite{KVM}{9}
\bibcite{arne}{10}
\bibcite{luca}{11}
\@writefile{lot}{\contentsline {table}{\numberline {8}{\ignorespaces  Example of backend state data in JSON format }}{25}}
\newlabel{messageformat}{{8}{25}}
