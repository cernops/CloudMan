\contentsline {table}{\numberline {1}{\ignorespaces Example top level allocation for CMS: There are two zones, one with UPS coverage which has 10 servers, and one with 100 servers for CPU processing. The performance of each server corresponds to 100\nobreakspace {}HS06. CMS gets a total allocation of 1000\nobreakspace {}HS06, 10\% of which are UPS covered. Cost of resources in zone 1 are larger than those in zone 2 due to the UPS feature.}}{8}
\contentsline {table}{\numberline {2}{\ignorespaces Example projects which are allocated by the CloudMan administrator. There are 3 only here: public batch is owned by some group in IT which manages the batch farm. The idea of this project is to setup shares for large user groups. The vobox project is a service where experiments can get reliable resources which are covered with a UPS. This project will only use resource from Zone 1 in fig\nobreakspace {}1\hbox {} while the batch project will use only resources from Zone 2 because they are cheaper. The attribute SHARE indicates that these are shared (not dedicated) resources. The maximum recursion depth means that for this project it is possible to do group and subgroup allocations only, and not beyond that. The IaaS self service is meant for cheap development machines. It uses the same resources as the public batch project.}}{9}
\contentsline {table}{\numberline {3}{\ignorespaces Project allocation for the example CMS group. These allocations are done by the CMS administrator who can sign up to any project for which he has a matching resource allocation. For each project he's interested in he determines a responsible (group of people), and gives them a fraction of the resources he got from the CloudMan administrator. With 10\% of the total allocation in the UPS they fill up their quota there.}}{10}
\contentsline {table}{\numberline {4}{\ignorespaces Group allocations for the batch project as done by the CMS\_batchadmin. The Higgs search group gets a large share of the batch system share of CMS. They can further on set priorities by defining shares for the individual Higgs search teams. }}{10}
\contentsline {table}{\numberline {5}{\ignorespaces Group allocations for the batch project as done by the CMS\_batchadmin. The Higgs search group gets a large share of the batch system share of CMS. They can further on set priorities by defining shares for the individual Higgs search teams. Due to the limitation in the recursion depth in the batch project it is not possible for the CMSHiggsAdmins to further split up the resources. }}{11}
\contentsline {table}{\numberline {6}{\ignorespaces Current state information as published by the project backends.}}{21}
\contentsline {table}{\numberline {7}{\ignorespaces Required key-value pairs for state information as published by the project backends for each resource. The block is repeated for each ResourceOwner.}}{21}
\contentsline {table}{\numberline {8}{\ignorespaces Example of backend state data in JSON format }}{25}
